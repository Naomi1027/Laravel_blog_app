name: Laravel Docker CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '*'

jobs:
  tests:
    name: Laravel Docker CI/CD
    runs-on: ubuntu-latest
    steps:
      - name: Start MySQL
        run: |
          sudo systemctl start mysql.service
          mysql -uroot -proot -e "CREATE DATABASE IF NOT EXISTS testing"
          mysql -uroot -proot -e "SHOW DATABASES"

      - uses: actions/checkout@v3
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          coverage: none

      - name: Run composer install
        run: composer install -n --prefer-dist

      # - name: Run node.js
      #   run: |
      #     npm install
      #     npm run prod

      - name: Prepare Laravel Application
        run: |
          touch .env.testing
          echo "${{ vars.DOT_ENV_TESTING }}" >> .env.testing

      - name: Run tests
        run: php artisan test

# name: Laravel Docker CI/CD

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - '*'

# jobs:
#   test:
#     runs-on: ubuntu-latest
#     services:
#       postgres:
#         image: postgres:15
#         env:
#           POSTGRES_USER: test
#           POSTGRES_PASSWORD: password
#           POSTGRES_DB: training
#         ports:
#           - 5432:5432
#         options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

#     steps:
#       - uses: actions/checkout@v4

#       - name: Setup PHP 8.2
#         uses: shivammathur/setup-php@v2
#         with:
#           php-version: 8.2
#           extensions: pdo, pgsql, pdo_pgsql

#       - name: cache vendor
#         id: cache
#         uses: actions/cache@v4
#         with:
#           path: ./vendor
#           key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
#           restore-keys: |
#             ${{ runner.os }}-composer-

#       - name: composer install
#         if: steps.cache.outputs.cache-hit != 'true'
#         run: composer install --prefer-dist --no-progress

#       - name: Copy .env
#         run: cp .env.example .env

#       - name: Setup .env
#         run: |
#           echo "APP_ENV=testing" >> .env
#           echo "DB_CONNECTION=pgsql" >> .env
#           echo "DB_HOST=localhost" >> .env
#           echo "DB_PORT=5432" >> .env
#           echo "DB_DATABASE=training" >> .env
#           echo "DB_USERNAME=test" >> .env
#           echo "DB_PASSWORD=password" >> .env

#       - name: Generate application key
#         run: php artisan key:generate

#       - name: Clear config cache
#         run: |
#           php artisan config:clear
#           php artisan cache:clear

#       - name: Run migrations
#         run: php artisan migrate --force

#       - name: Run tests
#         run: php artisan test --env=testing
